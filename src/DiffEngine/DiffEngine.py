# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _DiffEngine
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


GetDWORD = _DiffEngine.GetDWORD
class OneIDAClientManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneIDAClientManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OneIDAClientManager, name)
    __repr__ = _swig_repr
    def RetrieveFromSocket(*args): return _DiffEngine.OneIDAClientManager_RetrieveFromSocket(*args)
    def Retrieve(*args): return _DiffEngine.OneIDAClientManager_Retrieve(*args)
    def Save(*args): return _DiffEngine.OneIDAClientManager_Save(*args)
    def GetClientAnalysisInfo(*args): return _DiffEngine.OneIDAClientManager_GetClientAnalysisInfo(*args)
    def GetClientFileInfo(*args): return _DiffEngine.OneIDAClientManager_GetClientFileInfo(*args)
    def __init__(self, *args): 
        this = _DiffEngine.new_OneIDAClientManager(*args)
        try: self.this.append(this)
        except: self.this = this
    def DumpAnalysisInfo(*args): return _DiffEngine.OneIDAClientManager_DumpAnalysisInfo(*args)
    def GetName(*args): return _DiffEngine.OneIDAClientManager_GetName(*args)
    def DumpBlockInfo(*args): return _DiffEngine.OneIDAClientManager_DumpBlockInfo(*args)
    def GetFingerPrint(*args): return _DiffEngine.OneIDAClientManager_GetFingerPrint(*args)
    def RemoveFromFingerprintHash(*args): return _DiffEngine.OneIDAClientManager_RemoveFromFingerprintHash(*args)
    def GetBlockAddress(*args): return _DiffEngine.OneIDAClientManager_GetBlockAddress(*args)
    def GetMappedAddresses(*args): return _DiffEngine.OneIDAClientManager_GetMappedAddresses(*args)
    def SendTLVData(*args): return _DiffEngine.OneIDAClientManager_SendTLVData(*args)
    def GetDisasmLines(*args): return _DiffEngine.OneIDAClientManager_GetDisasmLines(*args)
    def FreeDisasmLines(*args): return _DiffEngine.OneIDAClientManager_FreeDisasmLines(*args)
    def ShowAddress(*args): return _DiffEngine.OneIDAClientManager_ShowAddress(*args)
    __swig_destroy__ = _DiffEngine.delete_OneIDAClientManager
    __del__ = lambda self : None;
OneIDAClientManager_swigregister = _DiffEngine.OneIDAClientManager_swigregister
OneIDAClientManager_swigregister(OneIDAClientManager)

class IDAClientManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDAClientManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDAClientManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DiffEngine.new_IDAClientManager(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetOneIDAClientManagerFromSocket(*args): return _DiffEngine.IDAClientManager_GetOneIDAClientManagerFromSocket(*args)
    def GetOneIDAClientManagerFromFile(*args): return _DiffEngine.IDAClientManager_GetOneIDAClientManagerFromFile(*args)
    def IDACommandProcessor(*args): return _DiffEngine.IDAClientManager_IDACommandProcessor(*args)
    __swig_destroy__ = _DiffEngine.delete_IDAClientManager
    __del__ = lambda self : None;
IDAClientManager_swigregister = _DiffEngine.IDAClientManager_swigregister
IDAClientManager_swigregister(IDAClientManager)

class FileInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["orignal_file_path"] = _DiffEngine.FileInfo_orignal_file_path_set
    __swig_getmethods__["orignal_file_path"] = _DiffEngine.FileInfo_orignal_file_path_get
    if _newclass:orignal_file_path = _swig_property(_DiffEngine.FileInfo_orignal_file_path_get, _DiffEngine.FileInfo_orignal_file_path_set)
    __swig_setmethods__["ComputerName"] = _DiffEngine.FileInfo_ComputerName_set
    __swig_getmethods__["ComputerName"] = _DiffEngine.FileInfo_ComputerName_get
    if _newclass:ComputerName = _swig_property(_DiffEngine.FileInfo_ComputerName_get, _DiffEngine.FileInfo_ComputerName_set)
    __swig_setmethods__["UserName"] = _DiffEngine.FileInfo_UserName_set
    __swig_getmethods__["UserName"] = _DiffEngine.FileInfo_UserName_get
    if _newclass:UserName = _swig_property(_DiffEngine.FileInfo_UserName_get, _DiffEngine.FileInfo_UserName_set)
    __swig_setmethods__["company_name_str"] = _DiffEngine.FileInfo_company_name_str_set
    __swig_getmethods__["company_name_str"] = _DiffEngine.FileInfo_company_name_str_get
    if _newclass:company_name_str = _swig_property(_DiffEngine.FileInfo_company_name_str_get, _DiffEngine.FileInfo_company_name_str_set)
    __swig_setmethods__["file_version_str"] = _DiffEngine.FileInfo_file_version_str_set
    __swig_getmethods__["file_version_str"] = _DiffEngine.FileInfo_file_version_str_get
    if _newclass:file_version_str = _swig_property(_DiffEngine.FileInfo_file_version_str_get, _DiffEngine.FileInfo_file_version_str_set)
    __swig_setmethods__["file_description_str"] = _DiffEngine.FileInfo_file_description_str_set
    __swig_getmethods__["file_description_str"] = _DiffEngine.FileInfo_file_description_str_get
    if _newclass:file_description_str = _swig_property(_DiffEngine.FileInfo_file_description_str_get, _DiffEngine.FileInfo_file_description_str_set)
    __swig_setmethods__["internal_name_str"] = _DiffEngine.FileInfo_internal_name_str_set
    __swig_getmethods__["internal_name_str"] = _DiffEngine.FileInfo_internal_name_str_get
    if _newclass:internal_name_str = _swig_property(_DiffEngine.FileInfo_internal_name_str_get, _DiffEngine.FileInfo_internal_name_str_set)
    __swig_setmethods__["product_name_str"] = _DiffEngine.FileInfo_product_name_str_set
    __swig_getmethods__["product_name_str"] = _DiffEngine.FileInfo_product_name_str_get
    if _newclass:product_name_str = _swig_property(_DiffEngine.FileInfo_product_name_str_get, _DiffEngine.FileInfo_product_name_str_set)
    __swig_setmethods__["modified_time_str"] = _DiffEngine.FileInfo_modified_time_str_set
    __swig_getmethods__["modified_time_str"] = _DiffEngine.FileInfo_modified_time_str_get
    if _newclass:modified_time_str = _swig_property(_DiffEngine.FileInfo_modified_time_str_get, _DiffEngine.FileInfo_modified_time_str_set)
    __swig_setmethods__["md5_sum_str"] = _DiffEngine.FileInfo_md5_sum_str_set
    __swig_getmethods__["md5_sum_str"] = _DiffEngine.FileInfo_md5_sum_str_get
    if _newclass:md5_sum_str = _swig_property(_DiffEngine.FileInfo_md5_sum_str_get, _DiffEngine.FileInfo_md5_sum_str_set)
    def __init__(self, *args): 
        this = _DiffEngine.new_FileInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DiffEngine.delete_FileInfo
    __del__ = lambda self : None;
FileInfo_swigregister = _DiffEngine.FileInfo_swigregister
FileInfo_swigregister(FileInfo)

class MatchInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _DiffEngine.MatchInfo_addr_set
    __swig_getmethods__["addr"] = _DiffEngine.MatchInfo_addr_get
    if _newclass:addr = _swig_property(_DiffEngine.MatchInfo_addr_get, _DiffEngine.MatchInfo_addr_set)
    __swig_setmethods__["end_addr"] = _DiffEngine.MatchInfo_end_addr_set
    __swig_getmethods__["end_addr"] = _DiffEngine.MatchInfo_end_addr_get
    if _newclass:end_addr = _swig_property(_DiffEngine.MatchInfo_end_addr_get, _DiffEngine.MatchInfo_end_addr_set)
    __swig_setmethods__["block_type"] = _DiffEngine.MatchInfo_block_type_set
    __swig_getmethods__["block_type"] = _DiffEngine.MatchInfo_block_type_get
    if _newclass:block_type = _swig_property(_DiffEngine.MatchInfo_block_type_get, _DiffEngine.MatchInfo_block_type_set)
    __swig_setmethods__["match_rate"] = _DiffEngine.MatchInfo_match_rate_set
    __swig_getmethods__["match_rate"] = _DiffEngine.MatchInfo_match_rate_get
    if _newclass:match_rate = _swig_property(_DiffEngine.MatchInfo_match_rate_get, _DiffEngine.MatchInfo_match_rate_set)
    __swig_setmethods__["name"] = _DiffEngine.MatchInfo_name_set
    __swig_getmethods__["name"] = _DiffEngine.MatchInfo_name_get
    if _newclass:name = _swig_property(_DiffEngine.MatchInfo_name_get, _DiffEngine.MatchInfo_name_set)
    __swig_setmethods__["type"] = _DiffEngine.MatchInfo_type_set
    __swig_getmethods__["type"] = _DiffEngine.MatchInfo_type_get
    if _newclass:type = _swig_property(_DiffEngine.MatchInfo_type_get, _DiffEngine.MatchInfo_type_set)
    __swig_setmethods__["match_addr"] = _DiffEngine.MatchInfo_match_addr_set
    __swig_getmethods__["match_addr"] = _DiffEngine.MatchInfo_match_addr_get
    if _newclass:match_addr = _swig_property(_DiffEngine.MatchInfo_match_addr_get, _DiffEngine.MatchInfo_match_addr_set)
    __swig_setmethods__["match_name"] = _DiffEngine.MatchInfo_match_name_set
    __swig_getmethods__["match_name"] = _DiffEngine.MatchInfo_match_name_get
    if _newclass:match_name = _swig_property(_DiffEngine.MatchInfo_match_name_get, _DiffEngine.MatchInfo_match_name_set)
    __swig_setmethods__["first_found_match"] = _DiffEngine.MatchInfo_first_found_match_set
    __swig_getmethods__["first_found_match"] = _DiffEngine.MatchInfo_first_found_match_get
    if _newclass:first_found_match = _swig_property(_DiffEngine.MatchInfo_first_found_match_get, _DiffEngine.MatchInfo_first_found_match_set)
    __swig_setmethods__["first_not_found_match"] = _DiffEngine.MatchInfo_first_not_found_match_set
    __swig_getmethods__["first_not_found_match"] = _DiffEngine.MatchInfo_first_not_found_match_get
    if _newclass:first_not_found_match = _swig_property(_DiffEngine.MatchInfo_first_not_found_match_get, _DiffEngine.MatchInfo_first_not_found_match_set)
    __swig_setmethods__["first_found_match_with_difference"] = _DiffEngine.MatchInfo_first_found_match_with_difference_set
    __swig_getmethods__["first_found_match_with_difference"] = _DiffEngine.MatchInfo_first_found_match_with_difference_get
    if _newclass:first_found_match_with_difference = _swig_property(_DiffEngine.MatchInfo_first_found_match_with_difference_get, _DiffEngine.MatchInfo_first_found_match_with_difference_set)
    __swig_setmethods__["second_found_match"] = _DiffEngine.MatchInfo_second_found_match_set
    __swig_getmethods__["second_found_match"] = _DiffEngine.MatchInfo_second_found_match_get
    if _newclass:second_found_match = _swig_property(_DiffEngine.MatchInfo_second_found_match_get, _DiffEngine.MatchInfo_second_found_match_set)
    __swig_setmethods__["second_not_found_match"] = _DiffEngine.MatchInfo_second_not_found_match_set
    __swig_getmethods__["second_not_found_match"] = _DiffEngine.MatchInfo_second_not_found_match_get
    if _newclass:second_not_found_match = _swig_property(_DiffEngine.MatchInfo_second_not_found_match_get, _DiffEngine.MatchInfo_second_not_found_match_set)
    __swig_setmethods__["second_found_match_with_difference"] = _DiffEngine.MatchInfo_second_found_match_with_difference_set
    __swig_getmethods__["second_found_match_with_difference"] = _DiffEngine.MatchInfo_second_found_match_with_difference_get
    if _newclass:second_found_match_with_difference = _swig_property(_DiffEngine.MatchInfo_second_found_match_with_difference_get, _DiffEngine.MatchInfo_second_found_match_with_difference_set)
    def __init__(self, *args): 
        this = _DiffEngine.new_MatchInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DiffEngine.delete_MatchInfo
    __del__ = lambda self : None;
MatchInfo_swigregister = _DiffEngine.MatchInfo_swigregister
MatchInfo_swigregister(MatchInfo)

class CodeBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodeBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start_addr"] = _DiffEngine.CodeBlock_start_addr_set
    __swig_getmethods__["start_addr"] = _DiffEngine.CodeBlock_start_addr_get
    if _newclass:start_addr = _swig_property(_DiffEngine.CodeBlock_start_addr_get, _DiffEngine.CodeBlock_start_addr_set)
    __swig_setmethods__["end_addr"] = _DiffEngine.CodeBlock_end_addr_set
    __swig_getmethods__["end_addr"] = _DiffEngine.CodeBlock_end_addr_get
    if _newclass:end_addr = _swig_property(_DiffEngine.CodeBlock_end_addr_get, _DiffEngine.CodeBlock_end_addr_set)
    def __init__(self, *args): 
        this = _DiffEngine.new_CodeBlock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DiffEngine.delete_CodeBlock
    __del__ = lambda self : None;
CodeBlock_swigregister = _DiffEngine.CodeBlock_swigregister
CodeBlock_swigregister(CodeBlock)

class DiffMachine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffMachine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiffMachine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DiffEngine.new_DiffMachine(*args)
        try: self.this.append(this)
        except: self.this = this
    def DumpMatchMapIterInfo(*args): return _DiffEngine.DiffMachine_DumpMatchMapIterInfo(*args)
    def GetMatchStatistics(*args): return _DiffEngine.DiffMachine_GetMatchStatistics(*args)
    def GetMatchRate(*args): return _DiffEngine.DiffMachine_GetMatchRate(*args)
    def DoFingerPrintMatch(*args): return _DiffEngine.DiffMachine_DoFingerPrintMatch(*args)
    def ShowDiffMap(*args): return _DiffEngine.DiffMachine_ShowDiffMap(*args)
    def PrintMatchMapInfo(*args): return _DiffEngine.DiffMachine_PrintMatchMapInfo(*args)
    def ShowResultsOnIDA(*args): return _DiffEngine.DiffMachine_ShowResultsOnIDA(*args)
    def Analyze(*args): return _DiffEngine.DiffMachine_Analyze(*args)
    def AnalyzeFunctionSanity(*args): return _DiffEngine.DiffMachine_AnalyzeFunctionSanity(*args)
    def GetMatchAddr(*args): return _DiffEngine.DiffMachine_GetMatchAddr(*args)
    def GetMatchInfoCount(*args): return _DiffEngine.DiffMachine_GetMatchInfoCount(*args)
    def GetMatchInfo(*args): return _DiffEngine.DiffMachine_GetMatchInfo(*args)
    def GetUnidentifiedBlockCount(*args): return _DiffEngine.DiffMachine_GetUnidentifiedBlockCount(*args)
    def GetUnidentifiedBlock(*args): return _DiffEngine.DiffMachine_GetUnidentifiedBlock(*args)
    def Save(*args): return _DiffEngine.DiffMachine_Save(*args)
    def Retrieve(*args): return _DiffEngine.DiffMachine_Retrieve(*args)
    __swig_destroy__ = _DiffEngine.delete_DiffMachine
    __del__ = lambda self : None;
DiffMachine_swigregister = _DiffEngine.DiffMachine_swigregister
DiffMachine_swigregister(DiffMachine)



